from cProfile import label
from http import client
import os
from decouple import config as cfg
from logger_config import logger
from aiogram import Router, flags, F
from aiogram.types import InputFile
from aiogram.types import ChatMember, Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from pprint import pprint
from parser.ozon import report
from parser.wb import all_sales
from main import bot
from config.set import admins
import asyncio

from sqlalchemy.future import select
from Data.models import Profile
from Data.models import Shops
from Data.db import get_session

from keyboards.inline import kb_change_brand, kb_change_market_place, brand_inline, years_inline, month_inline

router = Router()

ADMIN_IDS = admins  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_group_admin(chat_id: int, user_id: int) -> bool:
    member = await bot.get_chat_member(chat_id, user_id)
    return member.status in [ChatMember.ADMINISTRATOR, ChatMember.CREATOR]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report
@router.message(Command(commands=["report"]))
async def cmd_start(message: Message):
    async with get_session() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async with –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        try:
            tg_user = message.from_user.username
            result = await session.execute(select(Profile).where(Profile.tg_username == tg_user))
            profile = result.scalars().first()

            if profile:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å üõç", reply_markup=kb_change_market_place().as_markup())
            else:
                await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                if not await is_admin(message.from_user.id):
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                    return
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
@router.callback_query(F.data.startswith('mp_'))
async def change_shop(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    user = callback.from_user.username
    await state.update_data(mp=callback.data)
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω', reply_markup=await kb_change_brand(tg_user=user))
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
@router.callback_query(F.data.startswith('brand_'))
async def change_brand(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await state.update_data(brand=callback.data)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞', reply_markup=years_inline().as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
@router.callback_query(F.data.startswith('years_'))
async def change_month(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await callback.message.edit_reply_markup(reply_markup=month_inline().as_markup())
    await state.update_data(years=callback.data)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
@router.callback_query(F.data.startswith('month_'))
async def change_finish(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await state.update_data(month=callback.data)
    dt = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 'years', 'month', 'mp', –∏ 'brand' —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    years = dt.get('years', None)
    month = dt.get('month', None)
    mp = dt.get('mp', None)
    brand = dt.get('brand', None)

    if not (years and month and mp and brand):
        await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ.")
        return

    years = years.split('_')[1]
    month = month.split('_')[1]
    date = f'{years}-{month}'
    br = brand[brand.index("_") + 1:]

    await callback.message.answer('–û–∂–∏–¥–∞–π—Ç–µ ‚åõÔ∏è')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ user_id
    async with get_session() as session:
        tg_user = callback.from_user.username
        result_1 = await session.execute(
            select(Profile).filter(Profile.tg_username == tg_user)
        )
        username = result_1.scalar_one_or_none()

        if not username:
            await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = username.user_id

    # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å Ozon
    if mp == 'mp_ozon':
        async with get_session() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async with –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ client_id
                res1 = await session.execute(
                    select(Shops.shop_ozon_token).where(Shops.shop_name == br, Shops.user_id == user_id)
                )
                res2 = await session.execute(
                    select(Shops.shop_ozon_client_id).where(Shops.shop_name == br, Shops.user_id == user_id)
                )
                api_key = res1.scalar()
                client_id = res2.scalar()

                print(f"–¢–æ–∫–µ–Ω Ozon: {api_key}")
                print(f"client_id Ozon: {client_id}")
                print(f"AQUA_API_KEY –∏–∑ .env: {cfg('AQUA_API_KEY')}")

                if not (api_key and client_id):
                    await callback.message.answer("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –∏–ª–∏ client_id Ozon –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
                try:
                    report(api_key=str(api_key), client_id=str(client_id), month=int(month), year=int(years))
                except Exception as ex:
                    await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ Ozon: {str(ex)}")
                    return

                file_path = os.path.join('parser', 'reports', 'ozon', f'ozon_{month}_{years}.xlsx')

                if os.path.exists(file_path):
                    document = FSInputFile(file_path)
                    await bot.send_document(callback.message.chat.id, document)
                else:
                    await callback.message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ Ozon –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as e:
                await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å Wildberries
    elif mp == 'mp_wildberries':
        async with get_session() as session:
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Wildberries
                res3 = await session.execute(
                    select(Shops.shop_wb_token).where(Shops.shop_name == br, Shops.user_id == user_id)
                )
                wb_api = res3.scalar()

                if not wb_api:
                    await callback.message.answer("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω Wildberries –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
                try:
                    all_sales(api_key=str(wb_api), sales_year=years, sales_month=month, date=date)
                except Exception as ex:
                    await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ Wildberries: {str(ex)}")
                    return

                file_path = os.path.join('parser', 'reports', 'wb', f'wb_{date}.xlsx')

                if os.path.exists(file_path):
                    document = FSInputFile(file_path)
                    await bot.send_document(callback.message.chat.id, document)
                else:
                    await callback.message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ Wildberries –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as e:
                await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
